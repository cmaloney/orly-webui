package #1;

user_tweet_ident = 13;
tweet_user_ident = 17;

/* <[id, text, username, retweet_count, favorite_count, reply_to_status_id, reply_to_user_id]> */
tweet_t is <[int, str, str, int, int, int, int]>;

/* Schema.
  <[tweet_user_ident, tweet_id, user_id]> <- tweet_t
  <[user_tweet_ident, user_id, tweet_id]> <- tweet_t
  <[user_id, reply_to_status_id, tweet_id]> <- bool
  <[user_id, reply_to_user_id, tweet_id]> <- int
  <[reply_to_user_id, user_id, tweet_id]> <- str
*/

users = (keys (tweet_t) @ <[user_tweet_ident, free::(int), free::(int)]>).1 as {int};

total_tweet_count = (keys (tweet_t) @ <[tweet_user_ident, free::(int), free::(int)]> reduce start(0) + 1);

tweet_count = (keys (tweet_t) @ <[user_tweet_ident, uid, free::(int)]> reduce start(0) + 1) where {
  uid = given::(int);
};

tweets = (*(keys (tweet_t) @ <[user_tweet_ident, uid, free::(int)]>)::(tweet_t) as [tweet_t]) where {
  uid = given::(int);
};

responded_to = (keys (str) @ <[uid, free::(int), free::(int)]>.1 as {int}) where {
  uid = given::(int);
};

all_tweets = *(keys (tweet_t) @ <[user_tweet_ident, free::(int), free::(int)]>)::(tweet_t);

top_users = (<{.type: "table",
               .data: format(.entry: **sorted_users take n) as [{str: str}]}>) where {
  n = given::(int);
  tweet_count_per_user = (all_tweets collated_by start(0) + 1 having that.2) collected_by lhs + rhs;
  sorted_users = (**tweet_count_per_user as [<[str, int]>]) sorted_by lhs.1 > rhs.1;
  format = ({"1: Username": entry.0, "2: Tweets Sent": entry.1 as str}) where {
    entry = given::(<[str, int]>);
  };
};

get_kgrams_recur = 
    ((empty [[str]]
      if length_of texts < k 
      else [texts[:k]] + get_kgrams_recur(.texts: texts[1:], .k: k))) where {
  texts = given::([str]);
  k = given::(int);
};

get_kgrams = (get_kgrams_recur(.texts: split_text, .k: k)) where {
  text = given::(str);
  k = given::(int);
  split_text = ((text split "[ ,]").0 if not (that is empty)) as [str];
};

test {
  get_kgrams(.text: "hello there, what's up?", .k: 2) ==
  [["hello", "there"],
   ["there", "what's"],
   ["what's", "up?"]];
};

/* Helper function used in format. */
join = (("" if texts is empty else
         texts[0] + (**(texts[1:]) reduce start "" + delimiter + that))) where {
  texts = given::([str]);
  delimiter = given::(str);
};

test {
  join(.texts: empty [str], .delimiter: ", ") == "";
  join(.texts: ["x"], .delimiter: ", ") == "x";
  join(.texts: ["x", "y"], .delimiter: ", ") == "x, y";
};

/* Returns top N K-grams from all of the tweets. */
top_kgrams = (<{.type: "table",
                .data: format(.entry: **sorted_kgrams take n ) as [{str: str}]}>) where {
  n = given::(int);
  k = given::(int);
  all_kgrams = get_kgrams(.text: all_tweets.1, .k: k) reduce start(empty [[str]]) + that;
  collated_kgrams = **all_kgrams collated_by start(0) + 1 having that;
  collected_kgrams = collated_kgrams collected_by lhs + rhs;
  sorted_kgrams = (**collected_kgrams as [<[[str], int]>]) sorted_by lhs.1 > rhs.1;
  format = ({"1: " + (k as str) + "-gram": join(.texts: entry.0, .delimiter: " "),
             "2: Count": entry.1 as str}) where {
    entry = given::(<[[str], int]>);
  };
};

/* Returns top N pair of users in terms of the number of replies from user A to user B. */
top_pairs = (<{.type: "table",
               .data: format(.entry: **sorted_replies take n) as [{str: int}]}>) where {
  n = given::(int);
  all_replies = keys (int) @ <[free::(int), free::(int), free::(int)]>; 
  collated_replies = all_replies collated_by start(0) + 1 having [that.0, that.1];
  collected_replies = collated_replies collected_by lhs + rhs;
  sorted_replies = (**collected_replies as [<[[int], int]>]) sorted_by lhs.1 > rhs.1;
  format = ({"1: From": pair[0], "2: To": pair[1], "3: Tweets Sent": entry.1}) where {
    entry = given::(<[[int], int]>);
    pair = entry.0;
  };
};

/* Returns top N users who have the most number of reply tweets. */
top_replied = (<{.type: "table",
                 .data: format(.entry: **sorted_replies take n) as [{str: int}]}>) where {
  n = given::(int);
  all_replies = keys (str) @ <[free::(int), free::(int), free::(int)]>;
  collated_replies = all_replies collated_by start(0) + 1 having that.0;
  collected_replies = collated_replies collected_by lhs + rhs;
  sorted_replies = (**collected_replies as [<[int, int]>]) sorted_by lhs.1 > rhs.1;
  format = ({"1: User Id": entry.0, "2: Replied Tweet Count": entry.1}) where {
    entry = given::(<[int, int]>);
  };
};

