/* matrix.orly

   This is a package written to play with the matrix data for the js web console.  */

/* Set up nodes and edges. */
setup = (true) effecting {
  new <[0]> <- "Neo";
  new <[1]> <- "Morpheus";
  new <[2]> <- "Trinity";
  new <[3]> <- "Cypher";
  new <[4]> <- "Agent Smith";
  new <[5]> <- "The Architect";
  new <[0, "Knows", 1]> <- true;
  new <[0, "Loves", 2]> <- true;
  new <[1, "Knows", 2]> <- true;
  new <[1, "Knows", 3]> <- true;
  new <[3, "Knows", 4]> <- true;
  new <[4, "CodedBy", 5]> <- true;
};

/* Convenience type aliases. */
link_t is <{.source: str, .type: str, .target: str}>;

/* Returns the matrix graph in a format expected by the web client. */
display_graph = (<{.type: "graph", .data: links as [link_t]}>) where {
  get_name = (*<[uid]>::(str)) where {
    uid = given::(int);
  };
  links = (<{.source: get_name(.uid: tuples.0),
             .type: tuples.1,
             .target: get_name(.uid: tuples.2)}>) where {
    tuples = keys (bool) @ <[free::(int), free::(str), free::(int)]>;
  };
};

/* Convenience type aliases. */
path_t is [int];
entry_t is {str: str};

/* Given a path, explore one more depth and return a list of paths. */
get_neighbors_helper = (path + [next] as [path_t]) where {
  path = given::(path_t);
  edge = given::(str);
  visited = given::({int});
  last = path[length_of path - 1];
  next = (keys (bool) @ <[last, edge, free::(int)]>).2 if not (that in visited);
};

/* Given a list of paths of length N, explore one more depth to return a list of
   paths of length N + 1. */
get_neighbors = (seq reduce start empty [path_t] + that) where {
  paths = given::([path_t]);
  edge = given::(str);
  visited = given::({int});
  seq = get_neighbors_helper(.path: **paths, .edge: edge, .visited: visited);
};

bfs_helper = ((paths
               if neighbors is empty else
               paths + bfs_helper(.paths: neighbors, .edge: edge, .visited: new_visited))) where {
  paths = given::([path_t]);
  edge = given::(str);
  visited = given::({int});
  new_visited = visited | (**paths reduce start empty {int} | (**that as {int}));
  neighbors = get_neighbors(.paths: paths, .edge: edge, .visited: new_visited);
};

/* Returns a list of valid paths starting from n following a given edge type. */
bfs = (bfs_helper(.paths: init, .edge: edge, .visited: visited)) where {
  n = given::(int);
  edge = given::(str);
  paths = [[n]];
  visited = {n};
  init = get_neighbors(.paths : paths, .edge: edge, .visited: visited);
};

/* Format a path to an dict of type {str}. */
format = ({"A: first": first, "B: path": join(.texts: (seq as [str]), .delimiter: " -> "), "C: last": last}) where {
  path = given::(path_t);
  first = *<[path[0]]>::(str);
  last = *<[path[length_of path - 1]]>::(str);
  seq = *<[**path]>::(str);
};

/* Format each of the paths from calling bfs and return it as table data. */
display_bfs = (<{.type: "table",
                 .data: format(.path: **bfs(.n: n, .edge: edge)) as [entry_t]}>) where {
  n = given::(int);
  edge = given::(str);
};

/* Helper function used in format. */
join = (("" if texts is empty else
         texts[0] + (**(texts[1:]) reduce start "" + delimiter + that))) where {
  texts = given::([str]);
  delimiter = given::(str);
};

test {
  join(.texts: empty [str], .delimiter: ", ") == "";
  join(.texts: ["x"], .delimiter: ", ") == "x";
  join(.texts: ["x", "y"], .delimiter: ", ") == "x, y";
};

test {
  setup {
    bfs(.n: 0, .edge: "Knows") == [[0, 1], [0, 1, 2], [0, 1, 3], [0, 1, 3, 4]];
  };
};

